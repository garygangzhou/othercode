<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.ComponentModel.DataAnnotations"#>
<#@ assembly name="$(SolutionDir)\DataAccessLibrary\bin\Debug\EntityFramework.dll"#>
<#@ assembly name="$(SolutionDir)\DataAccessLibrary\bin\Debug\DataAccessLibrary.dll"#>

<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.ComponentModel.DataAnnotations"#>
<#@ import namespace="System.Data.Entity"#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Linq.Expressions;
using DataAccessLibrary;

// This is automatically generated code from a T4 template,
// created on <#=DateTime.Now#>

namespace DALTools
{
    public class UnitOfWork : IDisposable, IUnitOfWork
    {
        private AdventureWorks2012Entities context;

<# 
		Assembly asm = Assembly.GetAssembly(typeof(DataAccessLibrary.AdventureWorks2012Entities));

		var q = from t in asm.GetTypes()
				where 
					t.IsClass 
					&& 
					t.Namespace == "DataAccessLibrary"
					&&
					!t.BaseType.Name.Contains("DbContext")
				select t;

		var qList = q.ToList();
		
		foreach(System.Type item in q.ToList()) {
#>
		private I<#=item.Name#>Repository _<#=item.Name#>Repository;
<#
		}

		foreach(System.Type item in q.ToList()) {
#>

        public I<#=item.Name#>Repository <#=item.Name#>Repository
        {
            get
            {
                if (this._<#=item.Name#>Repository == null)
                {
                    this._<#=item.Name#>Repository = new <#=item.Name#>Repository(context);
                }
                return _<#=item.Name#>Repository;
            }
        }
<#
        }
#>

        public UnitOfWork(AdventureWorks2012Entities dbcontext)
        {
            context = dbcontext;
        }

        public void Save()
        {
            context.SaveChanges();
        }

        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    context.Dispose();
                }
            }
            this.disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }
}
